# Nombre del flujo de trabajo, aparecerá en la pestaña "Actions" de GitHub
name: Deploy Frontend to Hostinger

# Disparador: Este flujo se ejecuta cada vez que hay un push a la rama "main"
on:
  push:
    branches:
      - main

# Trabajos: Lista de tareas que el robot debe ejecutar
jobs:
  build-and-deploy:
    # El tipo de máquina que usará el robot (Ubuntu es estándar)
    runs-on: ubuntu-latest

    # Pasos: La secuencia de acciones a realizar
    steps:
      # 1. Descarga el código del repositorio a la máquina del robot
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configura Node.js para que podamos usar npm
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 3. Entra en la carpeta frontend e instala las dependencias
      - name: Install dependencies
        run: |
          cd frontend
          npm install

      # 4. Construye la aplicación de producción
      - name: Build application
        run: |
          cd frontend
          npm run build

      # 5. Configura la clave SSH y añade el host a los hosts conocidos
      - name: Setup SSH and Known Hosts
        run: |
          # Carga la clave SSH privada de forma segura
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Añade la huella digital del servidor de Hostinger a la lista de hosts de confianza
          # para evitar prompts interactivos. Usamos el puerto correcto 65002.
          ssh-keyscan -p 65002 -H ${{ secrets.FTP_SERVER }} >> ~/.ssh/known_hosts

      # 6. PASO DE DEPURACIÓN 2: Listar contenido de la carpeta 'dist' local
      - name: DEBUG - List local 'dist' directory contents
        run: |
          echo "Listando contenido de ./frontend/dist/ ..."
          ls -la ./frontend/dist/

      # 7. Sube los archivos compilados a Hostinger vía rsync
      - name: Deploy to Hostinger via rsync
        run: |
          # Ejecutamos el comando rsync, especificando el puerto y usando una ruta de destino simplificada
          rsync -avz --delete -e "ssh -p 65002" ./frontend/dist/ ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }}:public_html


